<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SAP整体介绍及ABAP入门]]></title>
    <url>%2F2018%2F08%2F21%2FSAP%20%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8%E4%B8%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[SAP系统 System Applications and ProductsSAP 是全球企业管理软件与解决方案的技术领袖，同时也是市场领导者。30余年，通过其应用软件、服务与支持，SAP持续不断向全球各行业企业提供全面的企业级管理软件解决方案。随着以SAP为代表的新一代商业智能应用所受到企业用户的广泛青睐，SAP在中国用户的激增，具备最终用户或内部顾问应掌握的基本SAP技能的人才需求数量也相应增加。 SAP官网系统教程SAP的官网为我们提供了SAP开发的教程集合有可能需要注册。同时，我们了解到，SAP系统有自己的一套开发语言。我们先在这里了解一下ABAP语言。 一， 什么是ABAP： 定义：ABAP=Advanced business application program SAP最初开发ABAP/4语言仅为内部使用，为应用程序员提供优化的工作环境。经过不断的改进和修改以满足商业领域的需要。现在， ABAP/4 已成为SAP开发所有自己的应用程 序的仅有工具。ABAP/4 是第四代支持结构化程序设计的语言。它合并了所有通常的控制结构和模块化概念。同时，它还支持面向对象的程序设计方法，这就为ABAP的应用开发开拓了更广阔的空间。而且，它还可以实现和其他编程语言的合成，如VB，JAVA，C/C++等。 二， ABAP的一些特性：ABAP包括：ABAP/4 支持商业数据类型和操作。您可以用特殊日期和时间字段进行计算。 系统会自动执行必需的类型转换。ABAP/4 包含一个叫 Open SQL 的SQL子集。用 Open SQL，您可以读取和访问数据库表，与所用的数据库系统无关ABAP/4 允许您定义和调用子程序。也可以调用其他程序的子程序 。参数能够以各种方式从子程序传递或传递到子程序。ABAP/4 包含一种特殊子程序，叫做功能模块。您可以在中央库中创建和维护功能模块。在调用程序和子程序之间功能模块有一个明确定义的数据接口。它们能够以调用程序的独立模式进行分别测试。ABAP/4 报表程序用于分析数据库表中的数据。这种分析的结果可以显示在屏幕上或发送到打印机上。逻辑数据库支持报表程序。ABAP/4将对话程序组织为包含对话模块的模块池。每个动态程序 （由一个屏幕及其流逻辑组成的动态程序）都基于一个ABAP/4 对话程序。流逻辑包含对 ABAP/4对话模块的调用。 三， 和ABAP相关联的SAP BASIS结构：SAP R/3系统是一个典型的三层架构系统，包括：表现层（Presentation Layer）：这是SAP用户和R/3系统交流的接口，用户在这一层对SAP系统进行操作。这层将用户的命令或者操作传送给R/3系统，然后系统进行相应的处理后把数据返还给用户。应用层（Application layer）：这层包括一个或者多个应用服务器和一个消息服务器。每一个应用服务器包括一系列服务以便运行应用程序。所有的服务分置在这些应用服务器之中，其实用户需要的只是其中的一个应用服务器，多个服务器之间传递信息以决定用户到底需要的是哪个服务器的服务。数据库层（Database layer）：这里就是SAP系统的核心，存放了所有SAP系统的数据。SAP支持很多数据库系统，包括：Microsoft SQL Server，ORACLE，INFORMIX，DB2等主流数据库系统。 四. ABAP的第一个程序：好了，看了这么多，自己都晕了，还是言归正传来做开发吧。首先要介绍一下事务代码（Transaction Code）的概念：在SAP中，每一个功能基本上都对应了一个事务代码，你可以输入相应的事务代码来执行相应的功能，事务代码在SAP MENU下面的输入框中输入。 第一个程序，HELLO WORLD： 用ABAP REPORT来实现: 1.进入SAP系统—〉SE38 。 2.输入程序名z_hello,选择Create 。 注意：自己开发的程序一定要用Z或者Y开头，这是因为SAP在升级的时候不会覆盖这些程序。 3.这时会弹出一个对话框，输入TITLE，选择Type为Executable program 。 4.然后又会弹出一个对话框，让你选择开发类（Package），如果你有自己的开发类的话，输入就可以，没有直接点下面的Local Object 。 5.ABAP编辑器出现了，输入代码： 1“WRITE: &apos;HELLO,WORLD!&apos; .” 。 6.按Ctrl+F2:语法检查；Ctrl+F3：激活；F8：执行。 到这里，ABAP的第一个程序就写出来了，好简单！！！ 用 ABAP DIALOG来实现：比较麻烦，在这里详细的介绍怎么建立SCREEN，以后就不介绍了 1.建立一个DIALOG程序，步骤同上，只不过在Type里选择Module pool，假设程序名为：Z_SCREEN 2.执行SE51,在Program里输入程序名称：Z_SCREEN；在screen number里输入屏幕的号码: 9000 , 然后点Create 3.在short description中输入你的描述：hello world screen 4.点layout，调出屏幕编辑器，建立一个标签，输入hello world 5.点激活，或者Ctrl+F3 6.执行SE93：建立事务代码：输入z_hello，点Create，会出现对话框，输入short text，选择Program and screen，然后输入你建立的程序名以及屏幕号，这里是Z_SCREEN，9000 7.点保存，然后会出现对话框，选择LOCAL Object 好了，执行z_hello，看到了吧，不过这个程序还没有退出的功能，后面会慢慢加上去的。最后，综述：ABAP编程不是简单的编程，SAP中最主要的语言，一个是ABAP，一个是JAVA ABAP以后的路应该往OO方向发展， 还有JAVA方面，中国适应的太少，使用SAP集成的太多，什么ITS，等等，最新的BSP技术，也是以后ABAPER需要了解和掌握的。 开发包括几大部分，最简单的REPORT和DIALOG，还有很多其他的，比如WEB，WORKFLOW，BAPI，以及和其他PC系统的接口。 REPORT最简单的，最重要的，提高代码执行效率。（SD的报表是多多的，表也是大大的，月报表是运行慢慢的，以后发展的路就是提高SD报表运行的效率） DIALOG不常用的，除非你需要开发自己的一套系统，只是使用SAP平台。 WORKFLOW要和HR相结合的。所以你是需要理解HR的东西的 WEB东西就是更多了，EP只是一个平台，EP不能满足你所有的功能。最新的BSP技术是全新的，中国好象没有几家在用的。 BW是个模块，严格上来说，是不属于ABAPER的范围。 SAP的技术是不断变化的，ABAPER哪个公司是不能少的，但是待遇就差了。 我觉得以后的路就是，多多掌握开发技术，并且了解模块的东西，你不会实施，但是你了解。 还有出路就是做第三方接口，也是前途很大]]></content>
      <categories>
        <category>SAP企业管理软件</category>
      </categories>
      <tags>
        <tag>SAP系统</tag>
        <tag>ABAP语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端知识.md]]></title>
    <url>%2F2018%2F08%2F17%2F%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[toastr入门与基本使用toastr概述 jquery toastr 一款轻量级的通知提示框插件。 网页开发中经常会用到提示框，自带的alert样式无法调整，用户体验差。 所以一般通过自定义提示框来实现弹窗提示信息，而jquery toastr正是为此的一款非常棒的插件 整体认知 我们可以通过toastr的Demo网址来整体认识一下toastr的作用，以及toastr的实现。然后我们通过toastr官网来得到更多的链接以及使用方法。项目中使用toastr我们一般引入整个源，然后使用，这里我们先下载toastr源码 使用方法三个步骤引入模块类库 1234&lt;link href="toastr.css" rel="stylesheet" type="text/css" /&gt;&lt;script src="jquery-1.9.1.min.js"&gt;&lt;/script&gt;&lt;!-- jquery文件，必须先引入的模块类库 --&gt;&lt;script src="toastr.js"&gt;&lt;/script&gt; 直接使用API调用,看到演示123456&lt;script src="jquery-1.9.1.min.js"&gt;&lt;/script&gt;&lt;!-- jquery文件，必须先引入的模块 --&gt;&lt;link href="toastr.css" rel="stylesheet"/&gt;&lt;script src="toastr.js"&gt;&lt;/script&gt;&lt;!--显示一个信息没有标题--&gt;toastr.info('Are you the 6 fingered man?') 其他选项 显示一个警告,没有标题 1toastr.warning('My name is Inigo Montoya. You killed my father', 'prepare to die!') 显示一个成功,标题 1toastr.success('Have fun storming the castle!', 'Miracle Max Says') 显示错误标题 1toastr.error('I do not think that word means what you think it means.', 'Inconceivable!') 清除当前的列表 1toastr.clear() 整体集成效果 先引入模块 1234&lt;link href="toastr.css" rel="stylesheet" type="text/css" /&gt;&lt;script src="jquery-1.9.1.min.js"&gt;&lt;/script&gt;&lt;!-- jquery文件，必须先引入的模块类库 --&gt;&lt;script src="toastr.js"&gt;&lt;/script&gt; 编写HTML页面引用 123456789101112&lt;button id="showtoast"&gt;show info toast（提示）&lt;/button&gt;&lt;br&gt;&lt;button id="showtoastsuccess"&gt;show success toast（成功）&lt;/button&gt;&lt;br&gt;&lt;button id="showtoasterror"&gt;show error toast（错误）&lt;/button&gt;&lt;br&gt;&lt;button id="showtoastwarning"&gt;show warning toast（警告）&lt;/button&gt;&lt;br&gt;&lt;button id="cleartoasts"&gt;clear toast（清除）&lt;/button&gt;&lt;br&gt;&lt;button id="removetoasts"&gt;remove toast（移除）&lt;/button&gt;&lt;br&gt; 编写JS脚本语言 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;script type="text/javascript"&gt; $(function() &#123; //设置显示配置 var messageOpts = &#123; "closeButton" : true,//是否显示关闭按钮 "debug" : false,//是否使用debug模式 "positionClass" : "toast-bottom-right",//弹出窗的位置 "onclick" : null, "showDuration" : "300",//显示的动画时间 "hideDuration" : "1000",//消失的动画时间 "timeOut" : "5000",//展现时间 "extendedTimeOut" : "1000",//加长展示时间 "showEasing" : "swing",//显示时的动画缓冲方式 "hideEasing" : "linear",//消失时的动画缓冲方式 "showMethod" : "fadeIn",//显示时的动画方式 "hideMethod" : "fadeOut" //消失时的动画方式 &#125;; toastr.options = messageOpts; $('#showtoast').click(function() &#123; //提示 //调用方法1 toastr.info('内容1'); //调用方法2 //toastr.info('内容2', '标题2'); //调用方法3 //toastr['info']('内容3', '标题3'); //调用方法4 //toastr.info('内容4', '标题4',messageOpts); &#125;); $('#showtoastsuccess').click(function() &#123; //成功 toastr.success('内容success', '标题success'); &#125;); $('#showtoasterror').click(function() &#123; //错误 toastr.error('内容error', '标题error'); &#125;); $('#showtoastwarning').click(function() &#123; //警告 toastr.warning('内容warning', '标题warning'); &#125;); $('#cleartoasts').click(function() &#123; //清除 toastr.clear(); &#125;); $('#removetoasts').click(function() &#123; //移除 toastr.remove(); &#125;); &#125;)&lt;/script&gt; 其他的可供选择的设置选项12345678910111213141516171819202122232425262728293031323334353637383940414243444546closeButton: true//是否在通知弹窗上面显示关闭按钮，true：显示；false：不显示debug: true//是否开起debugprogressBar: false//是否显示进度条，当为false时候不显示；当为true时候，显示进度条，当进度条缩短到0时候，消息通知弹窗消失positionClass: 'toast-top-right'//位置信息，消息弹窗显示的位置，可以显示的位置对应的值toast-top-righttoast-botton-righttoash-bottom-lefttoast-top-lefttoast-top-full-width //这个是在网页顶端，宽度铺满整个屏幕toast-bottom-full-widthtoast-top-center //顶端中间toast-bottom-centeronclick: nullshowDuration: "300"//显示动作（从无到有这个动作）持续的时间hideDuration: "1000"//隐藏动作持续的时间timeOut: "5000"//间隔的时间extendedTimeOut: "1000"showEasing: "swing",hideEasing: "linear",showMethod: "fadeIn"//显示的方式，和jquery相同，可以是show()hideMethod: "fadeOut"//隐藏的方式，和jquery相同，可以是hide()toastr['error']('I am yanying', 'title');//其中的error为显示的通知的样式类型，有4种选择 success 成功，绿色info 信息，蓝色warning，警告，橙色error，错误，深红色]]></content>
      <categories>
        <category>前端</category>
        <category>toastr</category>
        <category>弹窗式通知</category>
      </categories>
      <tags>
        <tag>toastr(吐司)</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello,Introduction]]></title>
    <url>%2F2018%2F08%2F17%2Fintroduction%2F</url>
    <content type="text"><![CDATA[This is ghostben BlogWelcome to ghostben blog! This is one World. Check here to find me in github. If you get any problems when using myblog, you can ask me through 163mail 13715965769@163.com 欢迎来到ghostben的博客论坛，这是我们学习生活分享的乐园，你可以通过cliclk here在github上找到我，如果你在本论坛遇到任何问题，你可以通过邮箱13715965769@163.com找到我。]]></content>
  </entry>
  <entry>
    <title><![CDATA[springboot应用的部署]]></title>
    <url>%2F2018%2F08%2F16%2Fspringboot%E5%BA%94%E7%94%A8%E7%9A%84%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[SpringBoot应用的打包发布接到同事的通知，说要把之前写好的应用打包发布到公司的服务器上，以便用户使用。可是按照常规的步骤执行之后一直有问题，在这里做记录，以后有需要使用的朋友可以借鉴。 环境 CentOs7.3及以上的Linux服务器 springboot应用，这里使用maven管理 jdk默认使用1.8及以上 IntellJ Idea 2018.2 限制 The default script supports most Linux distributions and is tested on CentOS and Ubuntu. Other platforms, such as OS X and FreeBSD, will require the use of a custom embeddedLaunchScript.当前文档适用于 CentOS and Ubuntu，其他平台需要定制脚本。详细参见springboot官方文档 步骤及方法添加maven打包依赖 我们这里演示的是使用maven作为项目依赖管理，如果使用其他项目依赖管理工具的，参见springboot官方文档)在maven的打包插件，添加依赖 1234567&lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;executable&gt;true&lt;/executable&gt; &lt;/configuration&gt;&lt;/plugin&gt; 打包应用 这里演示的是使用idea进行项目打包 应用转移到服务器端 使用ftp服务器拉取，或者直接托管到github再拉下来，方法很多，这里不再详述 拉取到本地服务器之后，要进行测试运行，然后再进行部署 我这里把文件拉取到了Share目录下，我是这样测试的 应用服务器端测试 首先确定服务器上安装的是jdk1.8,与我们的开发环境相对应就好了 1java -version 对打包好的应用进行测试。 123#根据官方文档，我们可以使用两种命令,这里的前提是都是在应用jar包的目录下1 ./yourApplication.jar2 java -jar yourApplication.jar 如果项目有使用数据库，要先进行数据库的安装配置，然后建立项目所需要的数据库以及数据表 然后就是测试运行 不能关闭终端，在浏览器输入你的项目运行端口测试。注意关闭服务器的防火墙，或者开放端口 测试成功了再进行下一步的部署安装 部署安装这里分两步。 首先把你的应用打包移动到var目录下 123456789sudo mv yourApplication.jar /var/#这里有可能要给文件赋予权限，最好还是加上，不然出错了，你根本不知道都什么原因chown -R * yourApplication.jar#切换到var目录查看文件cd /varll#这里会显示你的应用以及其他文件…… 建立一个软链接，让我们可以使用它，甚至开机启动 12345678ln -s /var/yourApplication.jar /etc/init.d/yourApp#建立好了软链接之后我们可以试一下系统有没有收录service yourApp start#失败会有很多报错的log输出，成功的话，在Centos会有提示，在Ubuntu16.04没有提示ss -lntup|grep 8899 (查看一下应用端口是否已经监听) 配置开机启动 添加服务开机自启 1chkconfig --add yourApp 查看一下是否添加成功 12345chkconfig --list （此时yourApp服务应该已经在列表中） service yourApp stop (手动停止服务) reboot （重启服务器） 重启服务器后，在查看一下应用端口，或者使用 jps命令， 如果看到你的应用名字，说明配置的spring boot应用开机自启成功 ， 应用输出控制台日志在 /var/log/yourApp.log 文件中。 完成应用部署，记录一下几个坑 检查jdk的版本很重要，一定要与你的开发环境一致 注意，当你使用自己安装的jdk时候，要把她链接到系统的一个执行路径上，否则会报 java not found 可以把他链接到 /usr/local/bin目录下这是系统运行的路径之一 数据库一点要配置正确，否则根本就没有办法运行应用 小心不要两次启动，会出现端口占用的情况。这时候要先停止，再启动.]]></content>
      <categories>
        <category>springboot使用</category>
      </categories>
      <tags>
        <tag>springboot部署</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot系列springboot_1]]></title>
    <url>%2F2018%2F08%2F15%2Fspringboot_1%2F</url>
    <content type="text"><![CDATA[一、Spring Boot 入门123public static void main (String [] args)&#123; System.out.println("Hello World");&#125; 1、Spring Boot 简介 简化Spring应用开发的一个框架； 整个Spring技术栈的一个大整合； J2EE开发的一站式解决方案； 2、微服务2014，由martin fowler提出 微服务：架构风格（服务微化） 一个应用应该是一组小型服务；可以通过HTTP的方式进行互通； 单体应用：ALL IN ONE 微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元； 详细参照微服务文档 3、环境准备环境约束 jdk1.8：Spring Boot 推荐jdk1.7及以上；java version “1.8.0_172” maven3.x：maven 3.3以上版本；Apache Maven 3.5.4 IntelliJ IDEA 2018.2 (Ultimate Edition)Build #IU-182.3684.101, built on July 24, 2018JRE: 1.8.0_152-release-1248-b8 amd64JVM: OpenJDK 64-Bit Server VM by JetBrains s.r.oWindows 10 10.0 SpringBoot 2.0.0.RELEASE：2.0.0； 统一环境；]]></content>
      <categories>
        <category>springboot使用</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>springboot(1)</tag>
      </tags>
  </entry>
</search>
